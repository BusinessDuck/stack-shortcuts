{"version":3,"sources":["../src/shortcuts.js"],"names":["getHash","shortcuts","keyMapCache","getPlatformKeyMap","result","platform","CMD","MODIFIERS_MAP","metaKey","ctrlKey","shiftKey","altKey","CodeKey","KeyCode","stack","keyList","map","keyChar","sort","join","getModifiersList","event","modifiers","forEach","key","push","handleEvent","keyCode","keysHash","handler","i","length","layer","hasHandler","getHandler","bind","document","addEventListener","unbind","removeEventListener","removeLayer","managerInstance","index","indexOf","splice","ShortcutsManager","config","_shortcuts","platformKeyMap","Object","keys","add","item","shortcut","resolveKeyMap","toUpperCase","split","ALL","Error","shortcutsManager","destroy","manager"],"mappings":"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","file":"shortcuts.js","sourcesContent":["import { KeyCode } from './utils/KeyCode';\nimport { reverse } from './utils/objectUtils';\nimport { getOSVersion } from './utils/userAgent';\n\nlet keyMapCache;\n\n/**\n * Platform keyboard mappings\n * @return {Object}\n */\nfunction getPlatformKeyMap() {\n    if (keyMapCache) {\n        return keyMapCache;\n    }\n\n    const result = {};\n    const platform = getOSVersion();\n\n    if (platform !== 'Mac OS') {\n        result.CMD = 'CTRL';\n    }\n\n    keyMapCache = result;\n\n    return result;\n}\n\nconst MODIFIERS_MAP = {\n    metaKey: 'CMD',\n    ctrlKey: 'CTRL',\n    shiftKey: 'SHIFT',\n    altKey: 'ALT'\n\n};\nconst CodeKey = reverse(KeyCode);\nconst stack = [];\n\n/**\n * Get shortcut hash not depend from order CTRL+SHIFT = SHIFT+CTRL\n * @param {Array} keyList\n * @return {number}\n * @private\n */\nexport function getHash(keyList) {\n    return keyList.map(keyChar => KeyCode[keyChar]).sort().join('');\n}\n\n/**\n * Handle event modifiers\n * @param {Event} event\n * @return {Array}\n * @private\n */\nfunction getModifiersList(event) {\n    const modifiers = [];\n\n    ['ctrlKey', 'metaKey', 'shiftKey', 'altKey'].forEach(key => {\n        if (event[key]) {\n            modifiers.push(MODIFIERS_MAP[key]);\n        }\n    });\n\n    return modifiers;\n}\n\n\n/**\n * Event handler of service\n * @param {Event} event\n */\nfunction handleEvent(event) {\n    const keyList = [...getModifiersList(event), CodeKey[event.keyCode]];\n    const keysHash = getHash(keyList);\n    let handler = () => {};\n\n    for (let i = 0; i < stack.length; ++i) {\n        const layer = stack[i];\n\n        if (layer.hasHandler(keysHash)) {\n            handler = layer.getHandler(keysHash).bind(null, event, handler);\n        }\n    }\n\n    handler();\n}\n\n/**\n * Adds keyboard event listeners\n */\nfunction bind() {\n    document.addEventListener('keydown', handleEvent);\n}\n\n/**\n * Removes keyboard event listeners\n */\nfunction unbind() {\n    document.removeEventListener('keydown', handleEvent);\n}\n\n/**\n * @param {ShortcutsManager} managerInstance\n */\nfunction removeLayer(managerInstance) {\n    if (stack.length) {\n        const index = stack.indexOf(managerInstance);\n\n        if (index === -1) {\n            return;\n        }\n\n        stack.splice(index, 1);\n\n        // when stack becomes empty we need to stop listening for any events\n        if (!stack.length) {\n            unbind();\n        }\n    }\n}\n\n\n/**\n * Hotkeys manager\n */\nclass ShortcutsManager {\n    /**\n     * Constructor\n     * @param {Object} config\n     * @param {Object} platformKeyMap\n     */\n    constructor(config) {\n        // eslint-disable-next-line\n        this._shortcuts = {};\n        this.platformKeyMap = getPlatformKeyMap();\n\n        Object.keys(config).forEach(key => {\n            this.add(key, config[key]);\n        });\n    }\n\n    /**\n     * Handle shortcuts defined in customKeyMap\n     * @param {String[]} keyList\n     * @return {String[]}\n     */\n    resolveKeyMap(keyList) {\n        return keyList.map(item => this.platformKeyMap[item] || item);\n    }\n\n    /**\n     * Add new hotkeys listener to layer\n     * @param {String} shortcut\n     * @param {Function} handler\n     */\n    add(shortcut, handler) {\n        const keysHash = getHash(this.resolveKeyMap(shortcut.toUpperCase().split('+')));\n\n        this._shortcuts[keysHash] = handler;\n    }\n\n    /**\n     * Remove shortcut from layer\n     * @param {String} shortcut\n     */\n    remove(shortcut) {\n        const keysHash = getHash(this.resolveKeyMap(shortcut.toUpperCase().split('+')));\n\n        delete this._shortcuts[keysHash];\n    }\n\n    /**\n     * Get shortcuts handler\n     * @param {number} keysHash\n     * @return {Function}\n     */\n    getHandler(keysHash) {\n        return this._shortcuts[keysHash] || this._shortcuts[KeyCode.ALL];\n    }\n\n    /**\n     * Can handle in current layer\n     * @param {Number} keysHash\n     * @return {Boolean}\n     */\n    hasHandler(keysHash) {\n        return !!this.getHandler(keysHash);\n    }\n}\n\n/**\n * Create a new layer\n * @param {Object} config\n * @return {Object}\n */\nexport function shortcuts(config) {\n\n    if (!config) {\n        throw new Error('Config must be not empty');\n    }\n\n    const shortcutsManager = new ShortcutsManager(config);\n\n    stack.push(shortcutsManager);\n\n    if (stack.length === 1) {\n        bind();\n    }\n\n    return {\n        destroy: () => removeLayer(shortcutsManager),\n        manager: shortcutsManager\n    };\n}\n"]}